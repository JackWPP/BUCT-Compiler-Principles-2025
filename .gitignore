# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
.pybuilder/
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# UV
#   Similar to Pipfile.lock, it is generally recommended to include uv.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#uv.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

# Abstra
# Abstra is an AI-powered process automation framework.
# Ignore directories containing user credentials, local state, and settings.
# Learn more at https://abstra.io/docs
.abstra/

# Visual Studio Code
#  Visual Studio Code specific template is maintained in a separate VisualStudioCode.gitignore 
#  that can be found at https://github.com/github/gitignore/blob/main/Global/VisualStudioCode.gitignore
#  and can be added to the global gitignore or merged into this file. However, if you prefer, 
#  you could uncomment the following to ignore the enitre vscode folder
# .vscode/

# Ruff stuff:
.ruff_cache/

# PyPI configuration file
.pypirc

# Cursor
#  Cursor is an AI-powered code editor. `.cursorignore` specifies files/directories to
#  exclude from AI features like autocomplete and code analysis. Recommended for sensitive data
#  refer to https://docs.cursor.com/context/ignore-files
.cursorignore
.cursorindexingignore
正则表达式-NFA-DFA-min(DFA)-词法分析程序/词法分析器GUI.exe
正则表达式-NFA-DFA-min(DFA)-词法分析程序/正则表达式-NFA-DFA-min(DFA)-词法分析程序.zip
正则表达式-NFA-DFA-min(DFA)-词法分析程序/启动词法分析器GUI.bat
正则表达式-NFA-DFA-min(DFA)-词法分析程序/计科2203-王海翔-2021060187-2.10 正则表达式-NFA-DFA-min(DFA)-词法分析程序.zip
LR语法分析方法判断/发布包/LR语法分析器.exe
SLR(1)完整的语法分析方法/发布包/SLR1语法分析器.exe
LR(1)完整的语法分析方法/发布包/LR1语法分析器.exe
LALR(1)完整的语法分析方法/发布包/LALR1语法分析器.exe
LR语法分析方法判断/发布包/计科2203-2021060187-王海翔-题目4.10 LR语法分析方法判断.zip
LR(1)完整的语法分析方法/发布包/计科2203-2021060187-王海翔-题目4.8 LR(1)完整的语法分析方法.zip
L属性文法语义分析程序/L属性文法语义分析程序_v1.0.0_20250624_225747.zip
SLR(1)完整的语法分析方法/发布包/计科2203-2021060187-王海翔-题目4.7 SLR(1)完整的语法分析方法.zip
LALR(1)完整的语法分析方法/发布包/计科2203-2021060187-王海翔-题目4.9 LALR(1)完整的语法分析方法.zip
L属性文法语义分析程序/发布包/计科2203-2021060187-王海翔-题目6.2 L属性文法语义分析程序.zip
依赖图语义分析程序/发布包/依赖图语义分析器.exe
依赖图语义分析程序/发布包/依赖图语义分析器_new.exe
依赖图语义分析程序/发布包/依赖图语义分析器_修复版.exe
依赖图语义分析程序/发布包/发布包.zip
L属性文法语义分析程序/发布包/L属性文法语义分析器.exe
L属性文法语义分析程序/发布包/L属性文法语义分析器.exe
L属性文法语义分析程序/发布包/L属性文法语义分析器.exe
依赖图语义分析程序/发布包/计科2203-2021060187-王海翔-题目6.3 依赖图语义分析程序.zip
