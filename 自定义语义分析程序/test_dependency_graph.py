#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
依赖图语义分析器测试程序

作者: 王海翔
学号: 2021060187
班级: 计科2203
"""

from custom_semantic_analyzer import *

def 测试依赖图分析器():
    """测试依赖图分析器的功能"""
    print("=== 依赖图语义分析器测试 ===\n")
    
    # 创建语义分析引擎管理器
    引擎 = 语义分析引擎管理器()
    
    # 定义测试文法（简单的算术表达式文法）
    测试文法 = """
[文法]
E -> E + T
E -> T
T -> T * F
T -> F
F -> ( E )
F -> num

[属性定义]
E.val : 综合 整数 0 "表达式值"
T.val : 综合 整数 0 "项值"
F.val : 综合 整数 0 "因子值"
num.val : 综合 整数 0 "数字值"

[语义规则]
E.val := E.val + T.val
E.val := T.val
T.val := T.val * F.val
T.val := F.val
F.val := E.val
F.val := num.val
"""
    
    print("1. 加载测试文法...")
    成功, 错误列表 = 引擎.加载文法(测试文法)
    
    if not 成功:
        print("文法加载失败:")
        for 错误 in 错误列表:
            print(f"  {错误}")
        return False
    
    print("√ 文法加载成功")
    
    # 显示文法信息
    文法 = 引擎.当前文法
    print(f"\n开始符号: {文法.开始符号}")
    print(f"终结符: {', '.join(sorted(文法.终结符集合))}")
    print(f"非终结符: {', '.join(sorted(文法.非终结符集合))}")
    
    print("\n产生式列表:")
    for i, 产生式 in enumerate(文法.产生式列表):
        print(f"  {i}: {产生式}")
    
    print("\n语义规则:")
    for 产生式编号, 规则列表 in 文法.语义规则表.items():
        if 规则列表:
            print(f"  产生式{产生式编号}:")
            for 规则 in 规则列表:
                print(f"    {规则}")
    
    print("\n2. 执行依赖图语义分析测试...")
    
    # 测试用例：简单表达式 "3 + 2"
    # 对应的语法分析结果（自底向上归约序列）
    测试输入 = "3 + 2"
    语法分析结果 = [5, 3, 1, 5, 3, 1, 0]  # 产生式编号序列
    
    print(f"输入串: {测试输入}")
    print(f"语法分析结果: {语法分析结果}")
    
    分析成功, 分析步骤, 错误信息 = 引擎.执行语义分析(
        语义分析类型.依赖图, 测试输入, 语法分析结果
    )
    
    if not 分析成功:
        print(f"语义分析失败: {错误信息}")
        return False
    
    print("√ 语义分析成功")
    
    print("\n分析步骤:")
    for 步骤 in 分析步骤:
        print(f"  步骤{步骤.步骤号}: {步骤.动作}")
        if 步骤.描述:
            print(f"    {步骤.描述}")
    
    print("\n=== 测试完成 ===")
    return True

def 测试循环依赖检测():
    """测试循环依赖检测功能"""
    print("\n=== 循环依赖检测测试 ===\n")
    
    引擎 = 语义分析引擎管理器()
    
    # 测试包含循环依赖的文法
    循环依赖文法 = """
[文法]
A -> B C
B -> b
C -> c

[属性定义]
A.s : 综合 字符串 "" "综合属性"
B.s : 综合 字符串 "" "综合属性"
C.s : 综合 字符串 "" "综合属性"

[语义规则]
A.s := B.s
B.s := C.s
C.s := A.s
"""
    
    print("1. 测试循环依赖检测...")
    成功, 错误列表 = 引擎.加载文法(循环依赖文法)
    
    if 成功:
        # 尝试执行语义分析，应该检测到循环依赖
        测试输入 = "b c"
        语法分析结果 = [1, 2, 0]
        
        分析成功, 分析步骤, 错误信息 = 引擎.执行语义分析(
            语义分析类型.依赖图, 测试输入, 语法分析结果
        )
        
        if 分析成功:
            print("错误：应该检测到循环依赖")
            return False
        else:
            print("√ 正确检测到循环依赖:")
            print(f"  {错误信息}")
    else:
        print(f"文法加载失败: {错误列表}")
        return False
    
    print("\n=== 循环依赖检测测试完成 ===")
    return True

def 测试综合分析器比较():
    """测试不同分析器的比较"""
    print("\n=== 综合分析器比较测试 ===\n")
    
    引擎 = 语义分析引擎管理器()
    
    # 定义一个简单的S属性文法
    S属性文法 = """
[文法]
E -> E + T
E -> T
T -> num

[属性定义]
E.val : 综合 整数 0 "表达式值"
T.val : 综合 整数 0 "项值"
num.val : 综合 整数 0 "数字值"

[语义规则]
E.val := E.val + T.val
E.val := T.val
T.val := num.val
"""
    
    print("1. 加载S属性文法...")
    成功, 错误列表 = 引擎.加载文法(S属性文法)
    
    if not 成功:
        print("文法加载失败:")
        for 错误 in 错误列表:
            print(f"  {错误}")
        return False
    
    print("√ 文法加载成功")
    
    # 测试输入
    测试输入 = "3 + 5"
    语法分析结果 = [2, 1, 2, 1, 0]
    
    print(f"\n测试输入: {测试输入}")
    print(f"语法分析结果: {语法分析结果}")
    
    # 测试S属性分析器
    print("\n2. 测试S属性分析器...")
    S分析成功, S分析步骤, S错误信息 = 引擎.执行语义分析(
        语义分析类型.S属性文法, 测试输入, 语法分析结果
    )
    
    if S分析成功:
        print("√ S属性分析成功")
        print(f"  分析步骤数: {len(S分析步骤)}")
    else:
        print(f"✗ S属性分析失败: {S错误信息}")
    
    # 测试L属性分析器
    print("\n3. 测试L属性分析器...")
    L分析成功, L分析步骤, L错误信息 = 引擎.执行语义分析(
        语义分析类型.L属性文法, 测试输入, 语法分析结果
    )
    
    if L分析成功:
        print("√ L属性分析成功")
        print(f"  分析步骤数: {len(L分析步骤)}")
    else:
        print(f"✗ L属性分析失败: {L错误信息}")
    
    # 测试依赖图分析器
    print("\n4. 测试依赖图分析器...")
    依赖图分析成功, 依赖图分析步骤, 依赖图错误信息 = 引擎.执行语义分析(
        语义分析类型.依赖图, 测试输入, 语法分析结果
    )
    
    if 依赖图分析成功:
        print("√ 依赖图分析成功")
        print(f"  分析步骤数: {len(依赖图分析步骤)}")
    else:
        print(f"✗ 依赖图分析失败: {依赖图错误信息}")
    
    print("\n=== 综合分析器比较测试完成 ===")
    return True

if __name__ == "__main__":
    print("依赖图语义分析器测试程序")
    print("=" * 50)
    
    try:
        # 运行基本功能测试
        基本测试成功 = 测试依赖图分析器()
        
        # 运行循环依赖检测测试
        循环测试成功 = 测试循环依赖检测()
        
        # 运行综合比较测试
        比较测试成功 = 测试综合分析器比较()
        
        if 基本测试成功 and 循环测试成功 and 比较测试成功:
            print("\n* 所有测试通过！")
        else:
            print("\n× 部分测试失败")
            
    except Exception as e:
        print(f"\n! 测试过程中发生异常: {e}")
        import traceback
        traceback.print_exc()
