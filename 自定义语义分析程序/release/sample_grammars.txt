# 自定义语义分析程序示例文法集合
# 作者: 王海翔 (2021060187)

# ==================== 示例1: 简单算术表达式文法 (S属性) ====================

[文法]
E -> E + T
E -> T
T -> T * F
T -> F
F -> ( E )
F -> num

[属性定义]
E.val : 综合 整数 0 "表达式值"
T.val : 综合 整数 0 "项值"
F.val : 综合 整数 0 "因子值"
num.val : 综合 整数 0 "数字值"

[语义规则]
E.val := E.val + T.val
E.val := T.val
T.val := T.val * F.val
T.val := F.val
F.val := E.val
F.val := num.val

# 测试输入: 3 + 2 * 4
# 语法分析结果: 5 3 5 3 2 1 5 3 1 0

# ==================== 示例2: 变量声明文法 (L属性) ====================

[文法]
D -> T L
T -> int
T -> float
L -> id , L
L -> id

[属性定义]
T.type : 综合 字符串 "" "类型信息"
L.in : 继承 字符串 "" "继承类型"
id.name : 综合 字符串 "" "标识符名称"

[语义规则]
L.in := T.type
T.type := "int"
T.type := "float"
L.in := L.in
L.in := L.in

# 测试输入: int a , b
# 语法分析结果: 1 4 3 0

# ==================== 示例3: 赋值语句文法 (依赖图) ====================

[文法]
S -> id = E
E -> E + T
E -> T
T -> id
T -> num

[属性定义]
S.code : 综合 字符串 "" "生成代码"
E.val : 综合 整数 0 "表达式值"
T.val : 综合 整数 0 "项值"
id.name : 综合 字符串 "" "标识符名称"
id.val : 综合 整数 0 "标识符值"
num.val : 综合 整数 0 "数字值"

[语义规则]
S.code := id.name + " = " + E.val
E.val := E.val + T.val
E.val := T.val
T.val := id.val
T.val := num.val

# 测试输入: x = y + 5
# 语法分析结果: 3 4 2 1 0

# ==================== 示例4: 布尔表达式文法 (S属性) ====================

[文法]
B -> B or A
B -> A
A -> A and C
A -> C
C -> not C
C -> ( B )
C -> true
C -> false

[属性定义]
B.val : 综合 布尔值 false "布尔值"
A.val : 综合 布尔值 false "与表达式值"
C.val : 综合 布尔值 false "比较表达式值"
true.val : 综合 布尔值 true "真值"
false.val : 综合 布尔值 false "假值"

[语义规则]
B.val := B.val or A.val
B.val := A.val
A.val := A.val and C.val
A.val := C.val
C.val := not C.val
C.val := B.val
C.val := true.val
C.val := false.val

# 测试输入: true and false or true
# 语法分析结果: 6 7 3 2 6 3 1 0

# ==================== 示例5: 函数调用文法 (L属性) ====================

[文法]
F -> id ( P )
P -> E , P
P -> E
E -> id
E -> num

[属性定义]
F.result : 综合 字符串 "" "函数调用结果"
P.params : 综合 字符串 "" "参数列表"
E.val : 综合 字符串 "" "表达式值"
id.name : 综合 字符串 "" "标识符名称"
num.val : 综合 字符串 "" "数字值"

[语义规则]
F.result := id.name + "(" + P.params + ")"
P.params := E.val + "," + P.params
P.params := E.val
E.val := id.name
E.val := num.val

# 测试输入: func ( x , 10 )
# 语法分析结果: 3 4 1 0

# ==================== 示例6: 数组访问文法 (依赖图) ====================

[文法]
A -> id [ E ]
E -> E + T
E -> T
T -> id
T -> num

[属性定义]
A.addr : 综合 字符串 "" "数组地址"
E.val : 综合 整数 0 "索引值"
T.val : 综合 整数 0 "项值"
id.name : 综合 字符串 "" "标识符名称"
id.val : 综合 整数 0 "标识符值"
num.val : 综合 整数 0 "数字值"

[语义规则]
A.addr := id.name + "[" + E.val + "]"
E.val := E.val + T.val
E.val := T.val
T.val := id.val
T.val := num.val

# 测试输入: arr [ i + 1 ]
# 语法分析结果: 3 4 2 1 0

# ==================== 使用说明 ====================

# 1. 复制上述任一示例文法到程序的文法输入框中
# 2. 点击"解析文法"按钮解析文法
# 3. 选择相应的分析类型（S属性文法、L属性文法或依赖图）
# 4. 输入测试字符串和语法分析结果
# 5. 点击"开始语义分析"执行分析过程

# 注意事项:
# - S属性文法只包含综合属性
# - L属性文法包含综合属性和继承属性，满足L属性特性
# - 依赖图方法可以处理任意属性文法
# - 语法分析结果是产生式编号的序列（自底向上归约顺序）
