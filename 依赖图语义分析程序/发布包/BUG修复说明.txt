依赖图语义分析器 - BUG修复说明

修复日期：2024年12月
修复版本：v1.1

=== 问题描述 ===
在使用默认文法进行语义分析时，出现了循环依赖错误：
"检测到循环依赖: T_4.val -> T_4.val"

这个问题出现在处理产生式 "T -> T * F" 时，语义规则 "T.val := T.val * F.val" 
被错误地解析，导致左部的 T.val 和右部第一个 T.val 被映射到同一个节点，
从而产生了自循环依赖。

=== 问题根源 ===
在 _处理语义规则 方法中，当处理右部有多个相同符号的产生式时（如 T -> T * F），
代码只匹配第一个出现的符号，没有正确区分不同位置的符号实例。

具体问题：
1. 产生式 "T -> T * F" 中有两个 T
2. 语义规则 "T.val := T.val * F.val" 中：
   - 左部 T.val 应该是新生成的 T 实例
   - 右部第一个 T.val 应该是已存在的 T 实例
   - 但代码错误地将它们映射到了同一个节点

=== 修复方案 ===
1. 改进符号匹配逻辑：
   - 添加已使用位置跟踪，避免重复匹配同一个符号实例
   - 确保语义规则中的每个符号引用都映射到正确的符号实例

2. 增强错误检测：
   - 添加自循环依赖检测
   - 在构建依赖边时检查是否会产生自循环

3. 优化依赖关系处理：
   - 明确区分左部符号和右部符号的不同实例
   - 按顺序匹配未使用的符号实例

=== 修复后的效果 ===
✓ 消除了循环依赖错误
✓ 正确处理多个相同符号的产生式
✓ 依赖图构建正确
✓ 拓扑排序正常工作
✓ 语义分析过程正确执行

=== 测试结果 ===
使用默认文法和语法分析序列 "5 3 1 2 0" 进行测试：

依赖图节点：
- F_0.val 依赖于 id_1.lexval
- T_2.val 依赖于 F_0.val  
- E_3.val 依赖于 T_2.val
- T_4.val 依赖于 E_3.val 和 F_6.val （正确！）
- E_7.val 依赖于 T_4.val 和 T_9.val

拓扑排序结果：
id_1.lexval -> F_6.val -> T_9.val -> F_0.val -> T_2.val -> E_3.val -> T_4.val -> E_7.val

=== 使用说明 ===
1. 使用修复版可执行文件：依赖图语义分析器_修复版.exe
2. 或者使用更新后的主程序：依赖图语义分析器.exe（如果已替换）
3. 现在可以正常处理包含相同符号的产生式
4. 循环依赖检测功能正常工作

=== 技术细节 ===
修复的核心代码位于 _处理语义规则 方法中：
- 添加了 已使用位置 集合来跟踪已匹配的符号位置
- 改进了符号匹配逻辑，确保每个符号实例只被匹配一次
- 增加了自循环检测，防止依赖节点ID等于目标节点ID

这个修复确保了L-属性文法的正确处理，特别是对于包含递归产生式的情况。

=== 联系信息 ===
如有其他问题，请联系：
作者：王海翔
学号：2021060187
班级：计科2203
