# -*- coding: utf-8 -*-
"""
依赖图语义分析程序综合测试脚本

全面测试程序的各项功能，包括边界情况和错误处理

作者: 王海翔
学号: 2021060187
班级: 计科2203
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from dependency_graph_main import *

class 测试结果:
    def __init__(self):
        self.总测试数 = 0
        self.通过测试数 = 0
        self.失败测试数 = 0
        self.失败详情 = []
    
    def 记录测试(self, 测试名称: str, 是否通过: bool, 错误信息: str = ""):
        self.总测试数 += 1
        if 是否通过:
            self.通过测试数 += 1
            print(f"✓ {测试名称}")
        else:
            self.失败测试数 += 1
            self.失败详情.append(f"{测试名称}: {错误信息}")
            print(f"✗ {测试名称} - {错误信息}")
    
    def 输出总结(self):
        print(f"\n测试总结:")
        print(f"总测试数: {self.总测试数}")
        print(f"通过: {self.通过测试数}")
        print(f"失败: {self.失败测试数}")
        print(f"通过率: {self.通过测试数/self.总测试数*100:.1f}%")
        
        if self.失败详情:
            print(f"\n失败详情:")
            for 详情 in self.失败详情:
                print(f"  - {详情}")

def 测试文法解析_基本功能(结果: 测试结果):
    """测试文法解析的基本功能"""
    print("\n=== 测试文法解析基本功能 ===")
    
    解析器 = 属性文法解析器()
    
    # 测试1: 正常文法解析
    文法内容 = """
[文法]
E -> T
T -> id

[属性定义]
E.val : 综合属性
T.val : 综合属性
id.lexval : 综合属性

[语义规则]
E.val := T.val      # 0
T.val := id.lexval  # 1
"""
    
    成功, 文法, 错误列表 = 解析器.解析文法文件(文法内容)
    结果.记录测试("正常文法解析", 成功 and len(文法.产生式列表) == 2)
    
    # 测试2: 空文法处理
    成功, 文法, 错误列表 = 解析器.解析文法文件("")
    结果.记录测试("空文法处理", not 成功)
    
    # 测试3: 只有注释的文法
    成功, 文法, 错误列表 = 解析器.解析文法文件("# 只有注释\n# 没有实际内容")
    结果.记录测试("只有注释的文法", not 成功 or len(文法.产生式列表) == 0)

def 测试依赖图构建_基本功能(结果: 测试结果):
    """测试依赖图构建的基本功能"""
    print("\n=== 测试依赖图构建基本功能 ===")
    
    # 准备测试文法
    解析器 = 属性文法解析器()
    文法内容 = """
[文法]
E -> T
T -> id

[属性定义]
E.val : 综合属性
T.val : 综合属性
id.lexval : 综合属性

[语义规则]
E.val := T.val      # 0
T.val := id.lexval  # 1
"""
    
    成功, 文法, _ = 解析器.解析文法文件(文法内容)
    if not 成功:
        结果.记录测试("依赖图构建前置条件", False, "文法解析失败")
        return
    
    构建器 = 依赖图构建器(文法)
    
    # 测试1: 正常依赖图构建
    语法分析结果 = [1, 0]
    成功, 依赖图对象, 错误信息 = 构建器.构建依赖图(语法分析结果)
    结果.记录测试("正常依赖图构建", 成功 and len(依赖图对象.节点表) > 0)
    
    # 测试2: 空的语法分析结果
    成功, 依赖图对象, 错误信息 = 构建器.构建依赖图([])
    结果.记录测试("空语法分析结果", 成功)  # 应该能处理空结果
    
    # 测试3: 无效的产生式编号
    成功, 依赖图对象, 错误信息 = 构建器.构建依赖图([999])
    结果.记录测试("无效产生式编号", 成功)  # 应该跳过无效编号

def 测试循环依赖检测(结果: 测试结果):
    """测试循环依赖检测功能"""
    print("\n=== 测试循环依赖检测功能 ===")
    
    # 创建一个简单的依赖图
    依赖图对象 = 依赖图()
    
    # 测试1: 无循环依赖
    节点A = 依赖图节点("A", "A.val")
    节点B = 依赖图节点("B", "B.val")
    依赖图对象.添加节点(节点A)
    依赖图对象.添加节点(节点B)
    依赖图对象.添加依赖边("A", "B")  # A依赖B
    
    有循环, 循环路径 = 依赖图对象.检测循环依赖()
    结果.记录测试("无循环依赖检测", not 有循环)
    
    # 测试2: 有循环依赖
    依赖图对象.添加依赖边("B", "A")  # B也依赖A，形成循环
    有循环, 循环路径 = 依赖图对象.检测循环依赖()
    结果.记录测试("有循环依赖检测", 有循环 and len(循环路径) > 0)
    
    # 测试3: 自循环
    依赖图对象.清空()
    节点C = 依赖图节点("C", "C.val")
    依赖图对象.添加节点(节点C)
    依赖图对象.添加依赖边("C", "C")  # 自循环
    有循环, 循环路径 = 依赖图对象.检测循环依赖()
    结果.记录测试("自循环检测", 有循环)

def 测试拓扑排序(结果: 测试结果):
    """测试拓扑排序功能"""
    print("\n=== 测试拓扑排序功能 ===")
    
    # 测试1: 正常拓扑排序
    依赖图对象 = 依赖图()
    节点A = 依赖图节点("A", "A.val")
    节点B = 依赖图节点("B", "B.val")
    节点C = 依赖图节点("C", "C.val")
    
    依赖图对象.添加节点(节点A)
    依赖图对象.添加节点(节点B)
    依赖图对象.添加节点(节点C)
    
    依赖图对象.添加依赖边("A", "B")  # A依赖B
    依赖图对象.添加依赖边("B", "C")  # B依赖C
    
    成功, 计算顺序, 错误信息 = 依赖图对象.拓扑排序()
    结果.记录测试("正常拓扑排序", 成功 and len(计算顺序) == 3)
    
    # 测试2: 空图拓扑排序
    依赖图对象.清空()
    成功, 计算顺序, 错误信息 = 依赖图对象.拓扑排序()
    结果.记录测试("空图拓扑排序", 成功 and len(计算顺序) == 0)

def 测试语义分析引擎(结果: 测试结果):
    """测试语义分析引擎"""
    print("\n=== 测试语义分析引擎功能 ===")
    
    # 准备测试环境
    解析器 = 属性文法解析器()
    文法内容 = """
[文法]
E -> id

[属性定义]
E.val : 综合属性
id.lexval : 综合属性

[语义规则]
E.val := id.lexval  # 0
"""
    
    成功, 文法, _ = 解析器.解析文法文件(文法内容)
    if not 成功:
        结果.记录测试("语义分析前置条件", False, "文法解析失败")
        return
    
    构建器 = 依赖图构建器(文法)
    成功, 依赖图对象, _ = 构建器.构建依赖图([0])
    
    if not 成功:
        结果.记录测试("语义分析前置条件", False, "依赖图构建失败")
        return
    
    分析引擎 = 语义分析引擎(文法)
    
    # 测试1: 正常语义分析
    成功, 分析步骤列表, 错误信息 = 分析引擎.执行语义分析(依赖图对象, "id")
    结果.记录测试("正常语义分析", 成功 and len(分析步骤列表) > 0)
    
    # 测试2: 空输入串
    成功, 分析步骤列表, 错误信息 = 分析引擎.执行语义分析(依赖图对象, "")
    结果.记录测试("空输入串分析", 成功)  # 应该能处理空输入

def 测试错误处理(结果: 测试结果):
    """测试各种错误情况的处理"""
    print("\n=== 测试错误处理功能 ===")
    
    解析器 = 属性文法解析器()
    
    # 测试1: 语法错误的文法
    错误文法1 = """
[文法]
E ->   # 缺少右部
T -> id
"""
    成功, _, 错误列表 = 解析器.解析文法文件(错误文法1)
    结果.记录测试("语法错误检测", not 成功 and len(错误列表) > 0)
    
    # 测试2: 属性定义错误
    错误文法2 = """
[文法]
E -> id

[属性定义]
E.val 综合属性  # 缺少冒号
"""
    成功, _, 错误列表 = 解析器.解析文法文件(错误文法2)
    结果.记录测试("属性定义错误检测", not 成功 and len(错误列表) > 0)
    
    # 测试3: 语义规则错误
    错误文法3 = """
[文法]
E -> id

[语义规则]
E.val = id.lexval  # 错误的赋值符号
"""
    成功, _, 错误列表 = 解析器.解析文法文件(错误文法3)
    结果.记录测试("语义规则错误检测", not 成功 and len(错误列表) > 0)

def 测试边界情况(结果: 测试结果):
    """测试边界情况"""
    print("\n=== 测试边界情况 ===")
    
    # 测试1: 非常长的文法
    长文法 = "[文法]\n"
    for i in range(100):
        长文法 += f"A{i} -> id\n"
    
    解析器 = 属性文法解析器()
    成功, 文法, _ = 解析器.解析文法文件(长文法)
    结果.记录测试("长文法处理", 成功 and len(文法.产生式列表) == 100)
    
    # 测试2: 特殊字符处理
    特殊文法 = """
[文法]
E -> id
# 包含特殊字符: !@#$%^&*()
"""
    成功, _, _ = 解析器.解析文法文件(特殊文法)
    结果.记录测试("特殊字符处理", 成功)

def run_comprehensive_tests():
    """运行综合测试"""
    print("依赖图语义分析程序 - 综合测试")
    print("=" * 60)
    
    结果 = 测试结果()
    
    try:
        测试文法解析_基本功能(结果)
        测试依赖图构建_基本功能(结果)
        测试循环依赖检测(结果)
        测试拓扑排序(结果)
        测试语义分析引擎(结果)
        测试错误处理(结果)
        测试边界情况(结果)
        
    except Exception as e:
        print(f"\n测试过程中发生异常: {str(e)}")
        import traceback
        traceback.print_exc()
    
    print("\n" + "=" * 60)
    结果.输出总结()

if __name__ == "__main__":
    run_comprehensive_tests()
