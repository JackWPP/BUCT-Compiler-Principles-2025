# L属性文法语义分析程序测试用例

## 测试用例1：基本类型声明
输入串：int a
预期结果：
- 符号表中添加 a:int
- 语义分析成功

## 测试用例2：多个变量声明
输入串：int a , b , c
预期结果：
- 符号表中添加 a:int, b:int, c:int
- 语义分析成功

## 测试用例3：不同类型声明
输入串：float x
预期结果：
- 符号表中添加 x:float
- 语义分析成功

## 测试用例4：字符类型声明
输入串：char ch1 , ch2
预期结果：
- 符号表中添加 ch1:char, ch2:char
- 语义分析成功

## 测试用例5：字符串类型声明
输入串：string str1 , str2 , str3
预期结果：
- 符号表中添加 str1:string, str2:string, str3:string
- 语义分析成功

## 测试用例6：单个字符变量
输入串：char c
预期结果：
- 符号表中添加 c:char
- 语义分析成功

## 测试用例7：复杂变量名
输入串：int var1 , var2 , variable3
预期结果：
- 符号表中添加 var1:int, var2:int, variable3:int
- 语义分析成功

## 测试用例8：浮点数变量
输入串：float pi , e , result
预期结果：
- 符号表中添加 pi:float, e:float, result:float
- 语义分析成功

## 验证L属性特性的测试用例

### 正确的L属性文法示例
[文法]
A -> B C
B -> b
C -> c

[属性定义]
A.s : 综合 字符串 "" "A的综合属性"
B.s : 综合 字符串 "" "B的综合属性"
C.i : 继承 字符串 "" "C的继承属性"
C.s : 综合 字符串 "" "C的综合属性"

[语义规则]
# 产生式 A -> B C 的语义规则
C.i := B.s
A.s := C.s

# 产生式 B -> b 的语义规则
B.s := "b_value"

# 产生式 C -> c 的语义规则
C.s := C.i + "_processed"

### 错误的非L属性文法示例（用于测试验证功能）
[文法]
A -> B C
B -> b
C -> c

[属性定义]
A.s : 综合 字符串 "" "A的综合属性"
B.i : 继承 字符串 "" "B的继承属性"
B.s : 综合 字符串 "" "B的综合属性"
C.s : 综合 字符串 "" "C的综合属性"

[语义规则]
# 违反L属性特性的语义规则
# B的继承属性依赖于C的综合属性（右边符号的属性）
B.i := C.s
A.s := B.s

## 边界测试用例

### 空输入测试
输入串：（空）
预期结果：错误提示

### 单个类型关键字
输入串：int
预期结果：语法错误（缺少标识符）

### 语法错误测试
输入串：int , a
预期结果：语法错误

### 未知类型测试
输入串：unknown_type var
预期结果：语法错误（未知类型）

## 性能测试用例

### 大量变量声明
输入串：int v1 , v2 , v3 , v4 , v5 , v6 , v7 , v8 , v9 , v10
预期结果：
- 符号表中添加10个int类型变量
- 语义分析成功
- 性能表现良好

## 符号表功能测试

### 重复变量名测试
输入串1：int a
输入串2：float a
预期结果：
- 第二次声明应该更新符号表中a的类型
- 或者报告重复声明错误（取决于语义规则设计）

### 作用域测试
输入串：int global_var
预期结果：
- 变量添加到全局作用域
- 符号表正确记录作用域信息

## 错误处理测试

### 语义规则错误
- 测试依赖属性不存在的情况
- 测试表达式计算错误的情况
- 测试符号表操作错误的情况

### 文法解析错误
- 测试格式错误的产生式
- 测试格式错误的属性定义
- 测试格式错误的语义规则

## 集成测试

### 完整的语义分析流程
1. 加载文法文件
2. 解析文法定义
3. 验证L属性特性
4. 执行语义分析
5. 查看符号表结果
6. 导出分析结果

### GUI功能测试
1. 文法输入和编辑
2. 文件加载和保存
3. 分析过程可视化
4. 符号表管理
5. 错误信息显示
6. 帮助文档查看
